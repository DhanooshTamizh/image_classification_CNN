# -*- coding: utf-8 -*-
"""img_classification_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18xB17lP_BLSCeTGxq3ScXu0xksFGNG8w
"""

#!/usr/bin/env python
# coding: utf-8

# In[ ]:





# In[45]:


from keras.datasets import cifar10


# In[46]:


(x_train, y_train), (x_test, y_test)=cifar10.load_data()


# In[47]:


print('xtrash',x_train.shape)


# In[48]:


import matplotlib.pyplot as plt
img=plt.imshow(x_train[0])
                      


#  print('The image label is: ', y_train[110
#                                      ])
# 

# In[49]:


print('The image label is: ', y_train[0
                                     ])


# In[50]:


from keras.utils import to_categorical
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)
print(y_train_one_hot)


# In[51]:


print('one hot label is',y_train_one_hot[0])


# In[52]:


x_train = x_train / 255
x_test = x_test / 255


# In[53]:


from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout,Activ
from tensorflow.keras import layers
model=Sequential()
model.add(Conv2D(32,(5,5),activation='relu',input_shape=(32,32,3)))


# In[54]:


model.add(MaxPooling2D(pool_size=(2,2)))


# In[55]:


model.add(Conv2D(64,(5,5),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


# In[56]:





# In[58]:




# In[57]:


model.add(Flatten())


# In[59]:


model.add(Dense(1000,activation='relu'))


# In[60]:


model.add(Dropout(0.5))


# In[61]:


model.add(Dense(500,activation='relu'))
model.add(Dropout(0.5))


# In[62]:


model.add(Dense(250,activation='relu'))


# In[ ]:


model.add(Dense(10,activation='softmax'))


# In[64]:





# In[ ]:


model.compile(loss='categorical_crossentropy', 
              optimizer='adam',
              metrics=['accuracy'])


# In[ ]:


hist = model.fit(x_train, y_train_one_hot, 
           batch_size=256, epochs=10, validation_split=0.2 )


# In[ ]:


model.evaluate(x_test, y_test_one_hot)[1]


# In[ ]:

model.evaluate(x_test, y_test_one_hot)[1]

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper right')
plt.show()

from google.colab import files
uploaded = files.upload()
new_image = plt.imread("cat2.jpg")

img = plt.imshow(new_image)

from skimage.transform import resize
resized_image = resize(new_image, (32,32,3))
img = plt.imshow(resized_image)

import numpy as np
probabilities = model.predict(np.array( [resized_image] ))
probabilities

index=probabilities

classification = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

index=np.argsort(probabilities[0:])
index

#print(classification[index[9]])